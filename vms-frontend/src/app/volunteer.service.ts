// src/app/volunteer.service.ts
import { Injectable } from '@angular/core';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { catchError, Observable, of, throwError } from 'rxjs';
import { Volunteer } from './models/volunteer.model'; // Ensure path is correct
import { environment } from '../environments/environment'; // Use environment variable
import { VolunteerProfile } from './models/volunteer-profile.model';
import { VolunteerDetails } from './models/volunteer-details.model';
import { RegisteredEvent } from './models/registerevent';

@Injectable({ 
  providedIn: 'root'
})
export class VolunteerService {
  private apiUrl = `${environment.apiUrl}/volunteers`; // Base URL for volunteers
  private apiUrl1 = `${environment.apiUrl}/profile/volunteer`; 
  private apiUrl2 = `${environment.apiUrl}`;
  constructor(private http: HttpClient) { }

  getVolunteers(): Observable<Volunteer[]> {
    console.log('VolunteerService: Fetching volunteers from', this.apiUrl);
    return this.http.get<Volunteer[]>(this.apiUrl);
  }

  getVolunteerById(id: number): Observable<Volunteer> {
    const url = `${this.apiUrl}/${id}`;
    console.log('VolunteerService: Fetching volunteer by ID from', url);
    return this.http.get<Volunteer>(url);
  }

  // Use Omit to type the input for creation (id is generated by backend)
  createVolunteer(volunteer: Omit<Volunteer, 'id'>): Observable<Volunteer> {
    console.log('VolunteerService: Creating volunteer at', this.apiUrl);
    return this.http.post<Volunteer>(this.apiUrl, volunteer);
  }

  updateVolunteer(id: number, volunteer: Volunteer): Observable<Volunteer> {
    const url = `${this.apiUrl}/${id}`;
    console.log('VolunteerService: Updating volunteer at', url);
    return this.http.put<Volunteer>(url, volunteer);
  }

  deleteVolunteer(id: number): Observable<void> { // Expecting 204 No Content
    const url = `${this.apiUrl}/${id}`;
    console.log('VolunteerService: Deleting volunteer at', url);
    return this.http.delete<void>(url);
  }













  getVolunteerProfile(userId: number): Observable<VolunteerProfile | null> {
    return this.http.get<VolunteerProfile>(`${this.apiUrl1}/${userId}`).pipe(
      catchError(this.handleError<VolunteerProfile | null>(null)) // Return null on 404
    );
  }

  // Create or Update volunteer details for a User ID
  saveVolunteerDetails(userId: number, details: VolunteerDetails): Observable<VolunteerProfile> {
    return this.http.put<VolunteerProfile>(`${this.apiUrl1}/${userId}`, details).pipe(
      catchError(this.handleError<VolunteerProfile>()) // Rethrow other errors
    );
  }

  // Generic error handler
  private handleError<T>(result?: T) {
      return (error: HttpErrorResponse): Observable<T> => {
          if (error.status === 404) {
              console.log(`Resource not found (404) for ${error.url}`);
              return of(result as T); // Return default value (e.g., null) for 404
          }

          console.error(`Backend returned code ${error.status}, body was: `, error.error);
          let userMessage = 'An unexpected error occurredwhile fetching data. Status: ${error.status}. Please try again later.';
          // ... (add more specific error message extraction if needed) ...
          if (error.error && typeof error.error === 'string') {
            userMessage = error.error; // Use backend message if it's a simple string
         } else if (error.error && error.error.message) {
            userMessage = error.error.message; // Use message property if backend sends structured error
         }
          return throwError(() => new Error(userMessage));
      };
  }


  
  getMyRegisteredEvents(volunteerId: number): Observable<RegisteredEvent[]> {
    // *** IMPORTANT: Verify this URL with your backend API documentation ***
    // const url = `${this.apiUrl}/${volunteerId}/registered-events`;
    const url = `${this.apiUrl2}/myevents/ids`;
    console.log(`VolunteerService: Fetching registered events for volunteer ${volunteerId} from ${url}`);

    // Adjust <RegisteredEvent[]> if you used a different type or 'any[]'
    return this.http.get<RegisteredEvent[]>(url).pipe(
      catchError(this.handleError<RegisteredEvent[]>([])) // Return empty array on error, or rethrow if preferred
    );
  }
}
